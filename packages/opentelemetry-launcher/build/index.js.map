{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleSpanProcessor, Tracer } from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { W3CTraceContextPropagator } from'@opentelemetry/core';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { Resource } from'@opentelemetry/resources';\nimport { SEMRESATTRS_SERVICE_NAME } from'@opentelemetry/semantic-conventions';\n\nimport {FetchInstrumentation} from'@opentelemetry/instrumentation-fetch';\nimport {Exception} from '@opentelemetry/api';\n\nlet WEB_TRACER_WITH_ZONE: Tracer;\nexport function initWebTracerWithZone (openTelemetryConfig: { serviceName: any; collectorEndpoint: any; ignoreUrls: any; propagateTraceHeaderCorsUrls: any; tracerName: any; }): Tracer {\n  console.log('init WebTracer With Zone', openTelemetryConfig);\n  if (WEB_TRACER_WITH_ZONE) {\n    return WEB_TRACER_WITH_ZONE;\n  }\n  const providerWithZone = new WebTracerProvider({\n    resource: new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: openTelemetryConfig.serviceName\n    })\n  });\n\n// Note: For production consider using the \"BatchSpanProcessor\" to reduce the number of requests\n// to your exporter. Using the SimpleSpanProcessor here as it sends the spans immediately to the\n// exporter without delay\n//   providerWithZone.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n  providerWithZone.addSpanProcessor(new SimpleSpanProcessor(new OTLPTraceExporter({\n    // url: 'http://localhost:4318/v1/traces',\n    url: openTelemetryConfig.collectorEndpoint\n  })));\n\n  providerWithZone.register({\n    contextManager: new ZoneContextManager(),\n    propagator: new W3CTraceContextPropagator(),\n  });\n\n  registerInstrumentations({\n    instrumentations: [\n      new XMLHttpRequestInstrumentation({\n        ignoreUrls: openTelemetryConfig.ignoreUrls,\n        propagateTraceHeaderCorsUrls: openTelemetryConfig.propagateTraceHeaderCorsUrls\n      }),\n      new FetchInstrumentation({\n        ignoreUrls: openTelemetryConfig.ignoreUrls,\n        propagateTraceHeaderCorsUrls: openTelemetryConfig.propagateTraceHeaderCorsUrls ///.*/, // 设置跨域请求时需要传播 trace 头部的 URL\n      }),\n    ],\n  });\n\n  const webTracerWithZone = providerWithZone.getTracer(openTelemetryConfig.tracerName);\n  // window.webTracerWithZone = webTracerWithZone;\n  WEB_TRACER_WITH_ZONE = webTracerWithZone;\n  return webTracerWithZone;\n}\n\nexport function aggregateExecutionTime(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  // if (!WEB_TRACER_WITH_ZONE) {\n  //   throw Error('Please init openTelemetry first.');\n  // }\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function (...args: any[]) {\n    const span = WEB_TRACER_WITH_ZONE.startSpan(`Executing ${propertyKey}`);\n    const startTime = Date.now();\n\n    const finishSpan = (result: any) => {\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      span.setAttribute('execution.duration', duration);\n      span.end();\n      return result;\n    };\n\n    try {\n      const result = originalMethod.apply(this, args);\n      if (result instanceof Promise) {\n        return result.then((res: any) => finishSpan(res)).catch((err: any) => {\n          span.recordException(err);\n          span.end();\n          throw err;\n        });\n      } else {\n        return finishSpan(result);\n      }\n    } catch (error) {\n      span.recordException(error as Exception);\n      span.end();\n      throw error;\n    }\n  };\n\n  return descriptor;\n}\n"]}